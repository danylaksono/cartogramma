{"version":3,"file":"cartogram.umd.js","sources":["../src/utils/d3-module.js","../src/utils/data-processor.js","../src/cartogram.js","../src/components/tooltip.js","../src/utils/export.js","../src/components/grid.js","../src/components/legend.js"],"sourcesContent":["/**\n * Re-exports d3 features to make imports cleaner in other files\n */\nimport * as d3Core from 'https://cdn.jsdelivr.net/npm/d3@7/+esm';\n\n// Re-export all D3 modules\nexport const d3 = d3Core;","/**\n * Utility functions for processing data\n */\n\n/**\n * Preprocess chart data\n * @param {Array} data - Array of data objects\n * @param {Object} options - Preprocessing options\n * @returns {Array} - Processed data\n */\nexport function preprocessChartData(data, options = {}) {\n  // Validate input\n  if (!Array.isArray(data)) {\n    console.error(\"Data must be an array for preprocessing\");\n    return [];\n  }\n\n  // Handle empty data\n  if (data.length === 0) {\n    console.warn(\"Empty data array provided for preprocessing\");\n    return [];\n  }\n\n  // Create a deep copy to avoid mutating the original data\n  let processedData = JSON.parse(JSON.stringify(data));\n  const { normalize = [], filter = {}, custom = null } = options;\n\n  try {\n    // Normalize specified columns\n    normalize.forEach((col) => {\n      // Skip if column name is invalid\n      if (typeof col !== \"string\" || !col.trim()) {\n        console.warn(\"Invalid column name for normalization\");\n        return;\n      }\n\n      // Check if column exists in at least one data point\n      if (!processedData.some((d) => col in d)) {\n        console.warn(\n          `Column \"${col}\" not found in chart data for normalization.`\n        );\n        return;\n      }\n\n      // Extract numerical values for normalization\n      const values = processedData\n        .map((d) => {\n          // Handle various data formats\n          if (d[col] === null || d[col] === undefined) return NaN;\n\n          const parsed =\n            typeof d[col] === \"number\"\n              ? d[col]\n              : parseFloat(String(d[col]).replace(/,/g, \"\"));\n          return parsed;\n        })\n        .filter((v) => !isNaN(v));\n\n      // Skip normalization if no valid values\n      if (values.length === 0) {\n        console.warn(`No valid numerical values in column \"${col}\"`);\n        return;\n      }\n\n      // Calculate min and max for normalization\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n\n      // Skip if min equals max (would result in division by zero)\n      if (max <= min) {\n        console.warn(\n          `Cannot normalize column \"${col}\": all values are the same`\n        );\n        return;\n      }\n\n      // Perform normalization\n      processedData = processedData.map((d) => {\n        const value =\n          typeof d[col] === \"number\"\n            ? d[col]\n            : parseFloat(String(d[col]).replace(/,/g, \"\"));\n\n        return {\n          ...d,\n          [col]: isNaN(value) ? d[col] : (value - min) / (max - min),\n        };\n      });\n    });\n\n    // Apply filters\n    Object.entries(filter).forEach(([col, condition]) => {\n      // Validate column name\n      if (typeof col !== \"string\" || !col.trim()) {\n        console.warn(\"Invalid column name for filtering\");\n        return;\n      }\n\n      // Check if column exists in data\n      if (!processedData.some((d) => col in d)) {\n        console.warn(`Column \"${col}\" not found in chart data for filtering.`);\n        return;\n      }\n\n      // Apply filter based on condition type\n      processedData = processedData.filter((d) => {\n        // Handle missing values\n        if (d[col] === null || d[col] === undefined) {\n          return true; // Keep rows with missing values\n        }\n\n        // Parse numerical value\n        const value =\n          typeof d[col] === \"number\"\n            ? d[col]\n            : parseFloat(String(d[col]).replace(/,/g, \"\"));\n\n        // Non-numeric values always pass through\n        if (isNaN(value)) return true;\n\n        // Simple threshold\n        if (typeof condition === \"number\") return value >= condition;\n\n        // Range conditions\n        if (condition && typeof condition === \"object\") {\n          if (condition.min !== undefined && value < condition.min)\n            return false;\n          if (condition.max !== undefined && value > condition.max)\n            return false;\n          return true;\n        }\n\n        // Default: keep the row\n        return true;\n      });\n    });\n\n    // Apply custom preprocessing function\n    if (custom) {\n      if (typeof custom !== \"function\") {\n        console.warn(\"Custom preprocessor must be a function, ignoring\");\n      } else {\n        try {\n          const customResult = custom(processedData);\n          if (Array.isArray(customResult)) {\n            processedData = customResult;\n          } else {\n            console.error(\"Custom preprocessing function must return an array\");\n          }\n        } catch (error) {\n          console.error(\"Error in custom preprocessing function:\", error);\n        }\n      }\n    }\n\n    // Add derived columns (like Total) for gender data\n    processedData = processedData.map((d) => {\n      try {\n        // Only calculate totals if both Male and Female columns exist\n        const hasMale = \"Male\" in d;\n        const hasFemale = \"Female\" in d;\n\n        if (hasMale || hasFemale) {\n          const male = hasMale ? parseInt(d.Male) || 0 : 0;\n          const female = hasFemale ? parseInt(d.Female) || 0 : 0;\n          return {\n            ...d,\n            Total: male + female,\n          };\n        }\n      } catch (error) {\n        console.warn(\"Error calculating totals:\", error);\n      }\n      return d; // Return original row if no gender data or error\n    });\n\n    return processedData;\n  } catch (error) {\n    console.error(\"Data preprocessing failed:\", error);\n    return data; // Fallback to unprocessed data\n  }\n}\n","/**\n * Main Cartogram class\n * Handles the creation and rendering of the cartogram visualization\n */\nimport { d3 } from \"./utils/d3-module.js\";\nimport { preprocessChartData } from \"./utils/data-processor.js\";\nimport { createTooltip } from \"./components/tooltip.js\";\nimport { createLegend } from \"./components/legend.js\";\nimport { renderGridCells } from \"./components/grid.js\";\nimport { exportToPNG } from \"./utils/export.js\";\n\nexport class Cartogram {\n  /**\n   * Create a new Cartogram instance\n   * @param {Object} options - Configuration options\n   */\n  constructor({\n    containerSelector = \".cartogram-container\",\n    width = 1200,\n    height = 1000,\n    margin = { top: 40, right: 40, bottom: 40, left: 40 },\n    gridPadding = 4,\n    labelFontSize = 12,\n    labelPosition = \"top\", // top, bottom, left, right, center\n    gridFill = \"#dfe4ea\",\n    hoverFill = \"#ffd700\",\n    borderColor = \"#333\",\n    borderRadius = 4,\n    showLegend = true,\n    legendPosition = \"top-right\",\n    gridLabelColumn = \"label\",\n    chartLabelColumn = \"label\",\n    animationDuration = 500,\n    preprocessOptions = {},\n  }) {\n    // Validate inputs\n    this.container = d3.select(containerSelector);\n    if (this.container.empty()) {\n      throw new Error(\n        `Container with selector \"${containerSelector}\" not found.`\n      );\n    }\n\n    // Initialize properties\n    this.width = width;\n    this.height = height;\n    this.margin = margin;\n    this.gridPadding = gridPadding;\n    this.labelFontSize = labelFontSize;\n    this.labelPosition = labelPosition;\n    this.gridFill = gridFill;\n    this.hoverFill = hoverFill;\n    this.borderColor = borderColor;\n    this.borderRadius = borderRadius;\n    this.showLegend = showLegend;\n    this.legendPosition = legendPosition;\n    this.gridLabelColumn = gridLabelColumn;\n    this.chartLabelColumn = chartLabelColumn;\n    this.animationDuration = animationDuration;\n    this.preprocessOptions = preprocessOptions;\n\n    // Data holders\n    this.gridData = [];\n    this.chartData = null;\n    this.gridSize = 0;\n    this.maxRow = 0;\n    this.maxCol = 0;\n    this.gridMap = new Map();\n    this.selectedGrid = null;\n    this.customGlyphFunction = null;\n    this.customGlyphConfig = null;\n    this.legendVisibility = new Map();\n\n    // Setup SVG\n    this.svg = this.container.select(\".cartogram-svg\");\n    if (this.svg.empty()) {\n      throw new Error(\n        'SVG element with class \"cartogram-svg\" not found in container.'\n      );\n    }\n    this.svg\n      .attr(\"viewBox\", `0 0 ${width} ${height}`)\n      .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n      .attr(\"role\", \"img\")\n      .attr(\"aria-label\", \"Cartogram visualization\");\n\n    // Setup tooltip\n    this.tooltip = createTooltip(this.container);\n\n    // Setup export button\n    this.setupExportButton();\n  }\n\n  /**\n   * Set up the export button functionality\n   * @private\n   */\n  setupExportButton() {\n    const button = this.container.select(\".export-button\");\n    if (button.empty()) {\n      console.warn(\"Export button not found. Skipping export setup.\");\n      return;\n    }\n\n    button.on(\"click\", () => {\n      exportToPNG(this.svg.node(), this.width, this.height);\n    });\n  }\n\n  /**\n   * Load and validate grid CSV data\n   * @param {string} csvText - The CSV data as a string\n   */\n  async loadGridData(csvText) {\n    try {\n      if (!csvText || typeof csvText !== \"string\" || csvText.trim() === \"\") {\n        throw new Error(\"Grid CSV text is empty or invalid.\");\n      }\n\n      const data = await d3.csvParse(csvText);\n      if (\n        !data.every(\n          (d) => this.gridLabelColumn in d && \"row\" in d && \"col\" in d\n        )\n      ) {\n        throw new Error(\n          `Grid CSV must contain \"${this.gridLabelColumn}\", \"row\", and \"col\" columns.`\n        );\n      }\n\n      this.gridData = data.map((d) => ({\n        label: d[this.gridLabelColumn] || \"\",\n        row: parseInt(d.row),\n        col: parseInt(d.col),\n      }));\n\n      // Validate rows and cols\n      this.gridData.forEach((d) => {\n        if (isNaN(d.row) || isNaN(d.col) || d.row < 1 || d.col < 1) {\n          throw new Error(`Invalid row or col for label \"${d.label}\".`);\n        }\n        const key = `${d.row}-${d.col}`;\n        if (this.gridMap.has(key)) {\n          throw new Error(\n            `Duplicate grid position at row ${d.row}, col ${d.col}.`\n          );\n        }\n        this.gridMap.set(key, d);\n      });\n\n      this.maxRow = Math.max(...this.gridData.map((d) => d.row), 1);\n      this.maxCol = Math.max(...this.gridData.map((d) => d.col), 1);\n\n      // Calculate grid size, reserving extra space for top/bottom labels\n      const plotWidth = this.width - this.margin.left - this.margin.right;\n      let plotHeight = this.height - this.margin.top - this.margin.bottom;\n      let labelExtraSpace = 0;\n      if (this.labelPosition === \"bottom\" || this.labelPosition === \"top\") {\n        // Use a small font for unobtrusive labels, matching grid.js logic\n        const effectiveLabelFontSize = Math.min(10, this.labelFontSize || 12);\n        labelExtraSpace = Math.ceil(effectiveLabelFontSize * 1.3);\n        plotHeight -= (this.maxRow - 1) * labelExtraSpace;\n      }\n      this.gridSize =\n        Math.min(plotWidth / this.maxCol, plotHeight / this.maxRow) -\n        this.gridPadding;\n\n      if (this.gridSize <= 0) {\n        throw new Error(\n          \"Grid size is too small. Increase canvas size or reduce number of rows/columns.\"\n        );\n      }\n\n      console.log(\n        \"Grid data loaded successfully:\",\n        this.gridData.length,\n        \"entries\"\n      );\n    } catch (error) {\n      console.error(\"Failed to load grid data:\", error);\n      this.displayError(error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Load and preprocess chart data CSV\n   * @param {string} csvText - The CSV data as a string\n   */\n  async loadChartData(csvText) {\n    try {\n      if (!csvText || typeof csvText !== \"string\" || csvText.trim() === \"\") {\n        console.warn(\n          \"Chart CSV text is empty or invalid. Skipping chart data.\"\n        );\n        this.chartData = null;\n        return;\n      }\n\n      const data = await d3.csvParse(csvText);\n      if (!data.every((d) => this.chartLabelColumn in d)) {\n        throw new Error(\n          `Chart CSV must contain \"${this.chartLabelColumn}\" column.`\n        );\n      }\n\n      // Apply preprocessing\n      const processedData = preprocessChartData(data, this.preprocessOptions);\n      this.chartData = new Map(\n        processedData.map((d) => [d[this.chartLabelColumn], d])\n      );\n      console.log(\n        \"Chart data loaded successfully:\",\n        processedData.length,\n        \"entries\"\n      );\n    } catch (error) {\n      console.error(\"Failed to load chart data:\", error);\n      this.chartData = null;\n    }\n  }\n\n  /**\n   * Display error message on SVG\n   * @param {string} message - The error message to display\n   * @private\n   */\n  displayError(message) {\n    this.svg.selectAll(\"*\").remove();\n    this.svg\n      .append(\"text\")\n      .attr(\"class\", \"error-message\")\n      .attr(\"x\", this.width / 2)\n      .attr(\"y\", this.height / 2)\n      .text(message);\n  }\n\n  /**\n   * Show tooltip\n   * @param {Event} event - The mouse event\n   * @param {Object} d - The data object\n   * @private\n   */\n  showTooltip(event, d) {\n    if (!event || !d || !this.tooltip) {\n      return;\n    }\n\n    // Make sure label is available\n    const label = d.label || \"Unknown\";\n    let tooltipContent = label;\n\n    // Add data from chart if available\n    if (this.chartData && this.chartData.get(label)) {\n      const data = this.chartData.get(label);\n      try {\n        Object.entries(data).forEach(([key, value]) => {\n          if (key !== this.chartLabelColumn) {\n            tooltipContent += `<br>${key}: ${\n              typeof value === \"number\" ? d3.format(\",\")(value) : value || \"N/A\"\n            }`;\n          }\n        });\n      } catch (error) {\n        console.error(\"Error generating tooltip content:\", error);\n      }\n    }\n\n    // Safely set tooltip position and content\n    try {\n      this.tooltip\n        .html(tooltipContent)\n        .style(\"display\", \"block\")\n        .style(\"left\", `${(event.pageX || 0) + 10}px`)\n        .style(\"top\", `${(event.pageY || 0) + 10}px`);\n    } catch (error) {\n      console.error(\"Error showing tooltip:\", error);\n      this.tooltip.style(\"display\", \"none\");\n    }\n  }\n\n  /**\n   * Set custom glyph function\n   * @param {Function} fn - The custom glyph function\n   * @param {Object} config - Configuration for the glyph function\n   */\n  setCustomGlyphFunction(fn, config = {}) {\n    if (typeof fn !== \"function\") {\n      console.warn(\"Custom glyph function must be a function. Ignoring.\");\n      return;\n    }\n\n    this.customGlyphFunction = fn;\n    this.customGlyphConfig = config;\n\n    if (config.legendItems) {\n      config.legendItems.forEach((item) => {\n        if (!this.legendVisibility.has(item.label)) {\n          this.legendVisibility.set(item.label, true);\n        }\n      });\n    }\n\n    console.log(\"Custom glyph function set:\", fn.name || \"anonymous\");\n  }\n\n  /**\n   * Draw the cartogram\n   */\n  draw() {\n    if (!this.gridData.length) {\n      this.displayError(\"No grid data to draw\");\n      return;\n    }\n\n    // Clear previous content\n    this.svg.selectAll(\"*\").remove();\n\n    // Draw grid cells\n    const gridGroups = renderGridCells(\n      this.svg,\n      this.gridData,\n      {\n        margin: this.margin,\n        gridSize: this.gridSize,\n        gridPadding: this.gridPadding,\n        borderRadius: this.borderRadius,\n        labelFontSize: this.labelFontSize,\n        labelPosition: this.labelPosition,\n        gridFill: this.gridFill,\n        hoverFill: this.hoverFill,\n        borderColor: this.borderColor,\n        selectedGrid: this.selectedGrid,\n      },\n      (event, d) => {\n        // Hover handler\n        d3.select(event.currentTarget)\n          .select(\".grid-cell\")\n          .attr(\"fill\", this.hoverFill);\n        this.showTooltip(event, d);\n      },\n      (event) => {\n        // Mouse out handler\n        const d = d3.select(event.currentTarget).datum();\n        const isSelected = this.selectedGrid === `${d.row}-${d.col}`;\n        d3.select(event.currentTarget)\n          .select(\".grid-cell\")\n          .attr(\"fill\", isSelected ? this.hoverFill : this.gridFill);\n        this.tooltip.style(\"display\", \"none\");\n      },\n      (event, d) => {\n        // Click handler\n        this.selectedGrid = `${d.row}-${d.col}`;\n        this.draw();\n      }\n    );\n\n    // Draw custom glyphs\n    if (this.customGlyphFunction && this.chartData) {\n      gridGroups.each((d, i, nodes) => {\n        const chartDatum = this.chartData.get(d.label);\n        if (chartDatum) {\n          const selection = d3\n            .select(nodes[i])\n            .append(\"g\")\n            .attr(\"class\", \"glyph-group\");\n          try {\n            // Pass bounds as a separate parameter to ensure it's always defined\n            const bounds = {\n              x: 0,\n              y: 0,\n              width: this.gridSize,\n              height: this.gridSize,\n            };\n\n            // Call the glyph function with proper error handling\n            this.customGlyphFunction(selection, bounds, chartDatum, {\n              ...this.customGlyphConfig,\n              legendVisibility: this.legendVisibility,\n              animationDuration: this.animationDuration,\n            });\n          } catch (error) {\n            console.error(`Error rendering glyph for \"${d.label}\":`, error);\n            // Add a visual indication that rendering failed\n            selection\n              .append(\"text\")\n              .attr(\"x\", this.gridSize / 2)\n              .attr(\"y\", this.gridSize / 2)\n              .attr(\"text-anchor\", \"middle\")\n              .attr(\"fill\", \"red\")\n              .text(\"⚠️\");\n          }\n        }\n      });\n    }\n\n    // Draw legend (remove previous legend first)\n    if (\n      this.showLegend &&\n      this.customGlyphFunction &&\n      this.customGlyphConfig &&\n      this.customGlyphConfig.legendItems\n    ) {\n      // Remove previous legend group if exists\n      this.svg.selectAll(\".legend-group\").remove();\n      createLegend(\n        this.svg,\n        this.customGlyphConfig.legendItems,\n        {\n          position: this.legendPosition,\n          width: this.width,\n          height: this.height,\n          margin: this.margin,\n          visibility: this.legendVisibility,\n        },\n        (event, d) => {\n          // Toggle legend visibility\n          const isVisible = this.legendVisibility.get(d.label) !== false;\n          this.legendVisibility.set(d.label, !isVisible);\n          d3.select(event.currentTarget)\n            .select(\"rect\")\n            .classed(\"disabled\", isVisible);\n          this.draw();\n        }\n      );\n    }\n\n    console.log(\"Cartogram drawn successfully\");\n  }\n}\n","/**\n * Tooltip component for displaying information on hover\n */\nimport { d3 } from \"../utils/d3-module.js\";\n\n/**\n * Create a tooltip element\n * @param {d3.Selection} container - The container to append the tooltip to\n * @returns {d3.Selection} - The tooltip element\n */\nexport function createTooltip(container) {\n  // Validate container\n  if (!container || container.empty()) {\n    console.error(\"Invalid container for tooltip\");\n    return d3.select(document.createElement(\"div\")); // Return empty div as fallback\n  }\n\n  try {\n    let tooltip = container.select(\".tooltip\");\n\n    if (tooltip.empty()) {\n      tooltip = container\n        .append(\"div\")\n        .attr(\"class\", \"tooltip\")\n        .style(\"display\", \"none\")\n        .style(\"position\", \"absolute\")\n        .style(\"background\", \"rgba(255, 255, 255, 0.95)\")\n        .style(\"padding\", \"8px\")\n        .style(\"border-radius\", \"4px\")\n        .style(\"box-shadow\", \"0 2px 5px rgba(0, 0, 0, 0.2)\")\n        .style(\"pointer-events\", \"none\")\n        .style(\"z-index\", \"1000\");\n    }\n\n    return tooltip;\n  } catch (error) {\n    console.error(\"Error creating tooltip:\", error);\n    return d3.select(document.createElement(\"div\")); // Return empty div as fallback\n  }\n}\n","/**\n * Utility functions for exporting visualizations\n */\n\n/**\n * Export an SVG element to PNG\n * @param {SVGElement} svgNode - The SVG DOM node to export\n * @param {number} width - The width of the output image\n * @param {number} height - The height of the output image\n */\nexport function exportToPNG(svgNode, width, height) {\n  try {\n    // Validate parameters\n    if (!svgNode || svgNode.tagName !== \"svg\") {\n      throw new Error(\"Invalid SVG node provided.\");\n    }\n\n    // Ensure valid dimensions\n    const exportWidth = Math.max(\n      50,\n      width || svgNode.width?.baseVal?.value || 800\n    );\n    const exportHeight = Math.max(\n      50,\n      height || svgNode.height?.baseVal?.value || 600\n    );\n\n    // Serialize SVG to string\n    const serializer = new XMLSerializer();\n    let svgString = serializer.serializeToString(svgNode);\n\n    // Fix SVG namespace issue if needed\n    if (\n      !svgString.match(/^<svg[^>]+xmlns=\"http:\\/\\/www\\.w3\\.org\\/2000\\/svg\"/)\n    ) {\n      svgString = svgString.replace(\n        /^<svg/,\n        '<svg xmlns=\"http://www.w3.org/2000/svg\"'\n      );\n    }\n\n    // Create canvas and set up image\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const img = new Image();\n\n    // Handle SVG to image conversion\n    const svgBlob = new Blob([svgString], {\n      type: \"image/svg+xml;charset=utf-8\",\n    });\n    const url = URL.createObjectURL(svgBlob);\n\n    img.onload = () => {\n      try {\n        // Set canvas size and draw image\n        canvas.width = exportWidth;\n        canvas.height = exportHeight;\n\n        // Fill with white background to handle transparency\n        ctx.fillStyle = \"white\";\n        ctx.fillRect(0, 0, exportWidth, exportHeight);\n\n        // Draw SVG on canvas\n        ctx.drawImage(img, 0, 0, exportWidth, exportHeight);\n\n        // Convert to PNG\n        const pngUrl = canvas.toDataURL(\"image/png\");\n\n        // Create download link\n        const link = document.createElement(\"a\");\n        const fileName = `cartogram_${new Date()\n          .toISOString()\n          .slice(0, 10)}.png`;\n        link.download = fileName;\n        link.href = pngUrl;\n        link.click();\n\n        // Clean up\n        URL.revokeObjectURL(url);\n        console.log(`Exported ${fileName} successfully.`);\n      } catch (error) {\n        console.error(\"Error generating PNG:\", error);\n        alert(`Export failed during PNG generation: ${error.message}`);\n        URL.revokeObjectURL(url);\n      }\n    };\n\n    img.onerror = (error) => {\n      console.error(\"Failed to load SVG image for export:\", error);\n      alert(\"Failed to convert SVG to image. Please try again.\");\n      URL.revokeObjectURL(url);\n    };\n\n    // Set image source to SVG blob URL\n    img.src = url;\n  } catch (error) {\n    console.error(\"Export failed:\", error);\n    alert(`Export failed: ${error.message}`);\n  }\n}\n","/**\n * Grid component for the cartogram\n */\nimport { d3 } from \"../utils/d3-module.js\";\n\n/**\n * Estimate text width (approximation)\n * @param {string} text - The text to measure\n * @param {number} fontSize - The font size\n * @returns {number} - Estimated width\n * @private\n */\nfunction estimateTextWidth(text, fontSize) {\n  return text.length * (fontSize * 0.6);\n}\n\n/**\n * Create and render grid cells\n * @param {d3.Selection} svg - The SVG element to append the grid to\n * @param {Array} gridData - Array of grid data\n * @param {Object} options - Configuration options\n * @param {Function} hoverHandler - Mouse over handler\n * @param {Function} outHandler - Mouse out handler\n * @param {Function} clickHandler - Click handler\n * @returns {d3.Selection} - The grid groups\n */\nexport function renderGridCells(\n  svg,\n  gridData,\n  options,\n  hoverHandler,\n  outHandler,\n  clickHandler\n) {\n  // Validate inputs\n  if (!svg || svg.empty()) {\n    console.error(\"Invalid SVG selection for grid cells\");\n    return d3.select(null); // Return empty selection\n  }\n\n  if (!Array.isArray(gridData) || gridData.length === 0) {\n    console.error(\"Invalid or empty grid data\");\n    return d3.select(null); // Return empty selection\n  }\n\n  // Set defaults for missing options\n  const {\n    margin = { top: 40, right: 40, bottom: 40, left: 40 },\n    gridSize = 50,\n    gridPadding = 4,\n    borderRadius = 4,\n    labelFontSize = 12,\n    labelPosition = \"top\", // \"top\", \"bottom\", \"left\", \"right\", \"center\", \"outside-top\", \"outside-bottom\", \"outside-left\", \"outside-right\"\n    labelMask = false,\n    labelMaskColor = \"#fff\",\n    labelMaskOpacity = 0.7,\n    labelDistance = null, // new option: distance between grid and label (null = auto)\n    gridFill = \"#dfe4ea\",\n    hoverFill = \"#ffd700\",\n    borderColor = \"#333\",\n    selectedGrid = null,\n  } = options || {};\n\n  // Calculate extra vertical space for labels (top/bottom/outside)\n  let labelExtraSpace = 0;\n  let effectiveLabelFontSize = labelFontSize;\n  // Defensive: ensure font size is positive and reasonable\n  if (!Number.isFinite(effectiveLabelFontSize) || effectiveLabelFontSize <= 0)\n    effectiveLabelFontSize = 12;\n  // Add extra space for outside labels\n  if (\n    [\"bottom\", \"top\", \"outside-top\", \"outside-bottom\"].includes(labelPosition)\n  ) {\n    effectiveLabelFontSize = Math.min(10, labelFontSize || 12, gridSize * 0.25);\n    labelExtraSpace = Math.ceil(effectiveLabelFontSize * 1.3);\n  }\n\n  // Create grid groups with error handling\n  try {\n    const gridGroups = svg\n      .selectAll(\".grid-group\")\n      .data(gridData)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"grid-group\")\n      .attr(\"transform\", (d) => {\n        // Ensure valid row and column values\n        const row = d.row && !isNaN(d.row) ? d.row : 1;\n        const col = d.col && !isNaN(d.col) ? d.col : 1;\n        const x = margin.left + (col - 1) * (gridSize + gridPadding);\n        // Add extra vertical space between rows for top/bottom labels\n        const y =\n          margin.top + (row - 1) * (gridSize + gridPadding + labelExtraSpace);\n        return `translate(${x}, ${y})`;\n      })\n      .attr(\"tabindex\", 0)\n      .attr(\"aria-label\", (d) => `Grid cell: ${d.label || \"Unnamed\"}`)\n      .on(\"mouseover\", function (event, d) {\n        if (typeof hoverHandler === \"function\") {\n          hoverHandler(event, d);\n        }\n      })\n      .on(\"mouseout\", function (event, d) {\n        if (typeof outHandler === \"function\") {\n          outHandler(event, d);\n        }\n      })\n      .on(\"click\", function (event, d) {\n        if (typeof clickHandler === \"function\") {\n          clickHandler(event, d);\n        }\n      })\n      .on(\"keypress\", (event, d) => {\n        if (\n          (event.key === \"Enter\" || event.key === \" \") &&\n          typeof clickHandler === \"function\"\n        ) {\n          clickHandler(event, d);\n        }\n      });\n\n    // Draw grid rectangles\n    gridGroups\n      .append(\"rect\")\n      .attr(\"class\", \"grid-cell\")\n      .attr(\"width\", Math.max(0, gridSize)) // Ensure non-negative width\n      .attr(\"height\", Math.max(0, gridSize)) // Ensure non-negative height\n      .attr(\"rx\", borderRadius || 0)\n      .attr(\"ry\", borderRadius || 0)\n      .attr(\"fill\", (d) => {\n        if (selectedGrid && selectedGrid === `${d.row}-${d.col}`) {\n          return hoverFill;\n        }\n        return gridFill;\n      })\n      .attr(\"stroke\", borderColor || \"#333\");\n\n    // Draw labels with improved positioning, truncation, and unobtrusive font size\n    gridGroups.each((d, i, nodes) => {\n      try {\n        const selection = d3.select(nodes[i]);\n        const safeGridSize = Math.max(10, gridSize);\n        let x = safeGridSize / 2,\n          y = safeGridSize / 2,\n          anchor = \"middle\",\n          baseline = \"middle\",\n          maxWidth = safeGridSize * 0.9;\n        // Defensive: ensure labelPosition is a string\n        const pos = typeof labelPosition === \"string\" ? labelPosition : \"top\";\n        // Smart offset calculation for outside/edge labels\n        // Use gridPadding and font size to keep label close but not overlapping\n        // Allow user to override with labelDistance\n        const labelPad =\n          labelDistance !== null && Number.isFinite(labelDistance)\n            ? labelDistance\n            : Math.max(2, gridPadding * 0.5); // minimal gap\n        const labelBoxH = effectiveLabelFontSize * 1.1;\n        // For outside positions, if labelDistance is set (including 0), use it as the gap from the grid edge. If not, use gridPadding.\n        switch (pos) {\n          case \"top\":\n            x = safeGridSize / 2;\n            y = -labelPad;\n            anchor = \"middle\";\n            baseline = \"alphabetic\";\n            maxWidth = safeGridSize * 1.5;\n            break;\n          case \"bottom\":\n            x = safeGridSize / 2;\n            y = safeGridSize + labelBoxH + labelPad - 2;\n            anchor = \"middle\";\n            baseline = \"hanging\";\n            maxWidth = safeGridSize * 1.5;\n            break;\n          case \"left\":\n            x = -labelPad;\n            y = safeGridSize / 2;\n            anchor = \"end\";\n            baseline = \"middle\";\n            maxWidth = safeGridSize * 1.5;\n            break;\n          case \"right\":\n            x = safeGridSize + labelPad;\n            y = safeGridSize / 2;\n            anchor = \"start\";\n            baseline = \"middle\";\n            maxWidth = safeGridSize * 1.5;\n            break;\n          case \"center\":\n            x = safeGridSize / 2;\n            y = safeGridSize / 2;\n            anchor = \"middle\";\n            baseline = \"middle\";\n            maxWidth = safeGridSize * 0.9;\n            break;\n          case \"outside-top\":\n            x = safeGridSize / 2;\n            y = -(labelDistance !== null && Number.isFinite(labelDistance)\n              ? labelDistance\n              : gridPadding);\n            anchor = \"middle\";\n            baseline = \"alphabetic\";\n            maxWidth = safeGridSize * 1.5;\n            break;\n          case \"outside-bottom\":\n            x = safeGridSize / 2;\n            y =\n              safeGridSize +\n              (labelDistance !== null && Number.isFinite(labelDistance)\n                ? labelDistance\n                : gridPadding);\n            anchor = \"middle\";\n            baseline = \"hanging\";\n            maxWidth = safeGridSize * 1.5;\n            break;\n          case \"outside-left\":\n            x = -(labelDistance !== null && Number.isFinite(labelDistance)\n              ? labelDistance\n              : gridPadding);\n            y = safeGridSize / 2;\n            anchor = \"end\";\n            baseline = \"middle\";\n            maxWidth = safeGridSize * 1.5;\n            break;\n          case \"outside-right\":\n            x =\n              safeGridSize +\n              (labelDistance !== null && Number.isFinite(labelDistance)\n                ? labelDistance\n                : gridPadding);\n            y = safeGridSize / 2;\n            anchor = \"start\";\n            baseline = \"middle\";\n            maxWidth = safeGridSize * 1.5;\n            break;\n          default:\n            x = safeGridSize / 2;\n            y = -labelPad;\n            anchor = \"middle\";\n            baseline = \"alphabetic\";\n            maxWidth = safeGridSize * 1.5;\n        }\n        let label = d && d.label ? String(d.label) : \"\";\n        let displayLabel = label;\n        // Defensive: ensure label is string and not too long\n        const estWidth = estimateTextWidth(label, effectiveLabelFontSize);\n        if (estWidth > maxWidth) {\n          let chars = Math.floor((maxWidth / estWidth) * label.length) - 2;\n          if (chars < 4) chars = 4;\n          displayLabel = label.slice(0, chars) + \"…\";\n        }\n        // Optional masking (background rect for label)\n        if (labelMask && displayLabel) {\n          selection\n            .append(\"rect\")\n            .attr(\"class\", \"grid-label-mask\")\n            .attr(\"x\", x - maxWidth / 2)\n            .attr(\"y\", y - effectiveLabelFontSize * 0.8)\n            .attr(\"width\", maxWidth)\n            .attr(\"height\", effectiveLabelFontSize * 1.3)\n            .attr(\"fill\", labelMaskColor)\n            .attr(\"opacity\", labelMaskOpacity);\n        }\n        // Draw label\n        const text = selection\n          .append(\"text\")\n          .attr(\"class\", \"grid-label\")\n          .attr(\"x\", x)\n          .attr(\"y\", y)\n          .attr(\"text-anchor\", anchor)\n          .attr(\"dominant-baseline\", baseline)\n          .attr(\"font-size\", effectiveLabelFontSize)\n          .text(displayLabel)\n          .style(\"cursor\", estWidth > maxWidth ? \"pointer\" : null)\n          .on(\"mouseover\", function () {\n            if (estWidth > maxWidth) {\n              d3.select(this).append(\"title\").text(label);\n            }\n          });\n      } catch (error) {\n        // Defensive: log error but do not break rendering\n        console.error(\n          `Error rendering label for grid cell: ${\n            error && error.message ? error.message : error\n          }`\n        );\n      }\n    });\n\n    return gridGroups;\n  } catch (error) {\n    console.error(\"Error rendering grid cells:\", error);\n    return d3.select(null); // Return empty selection\n  }\n}\n","/**\n * Legend component for the cartogram\n */\nimport { d3 } from \"../utils/d3-module.js\";\n\n/**\n * Create a legend component\n * @param {d3.Selection} svg - The SVG element to append the legend to\n * @param {Array} items - Array of legend items\n * @param {Object} options - Configuration options\n * @param {Function} clickHandler - Click handler for legend items\n * @returns {d3.Selection} - The legend group\n */\nexport function createLegend(svg, items, options, clickHandler) {\n  // Validate inputs\n  if (!svg || svg.empty()) {\n    console.error(\"Invalid SVG selection for legend\");\n    return d3.select(null); // Return empty selection\n  }\n\n  if (!Array.isArray(items) || items.length === 0) {\n    console.warn(\"No legend items provided\");\n    return d3.select(null); // Return empty selection\n  }\n\n  // Ensure every legend item has a label (fallback to color or index if missing)\n  items.forEach((item, idx) => {\n    if (!item.label || item.label === \"\") {\n      if (item.value) {\n        item.label = String(item.value);\n      } else if (item.color) {\n        item.label = String(item.color);\n      } else {\n        item.label = `Item ${idx + 1}`;\n      }\n    }\n  });\n\n  // Apply default options if missing\n  const {\n    position = \"top-right\",\n    width = 600,\n    height = 400,\n    margin = { top: 40, right: 40, bottom: 40, left: 40 },\n    visibility = new Map(),\n  } = options || {};\n\n  try {\n    const legendWidth = 120;\n    const legendHeight = Math.max(items.length * 25 + 10, 35); // Ensure minimum height\n    let legendX, legendY;\n\n    // Position the legend based on the specified position\n    switch (position) {\n      case \"top-left\":\n        legendX = margin.left;\n        legendY = margin.top;\n        break;\n      case \"top-right\":\n        legendX = Math.max(0, width - margin.right - legendWidth);\n        legendY = margin.top;\n        break;\n      case \"bottom-left\":\n        legendX = margin.left;\n        legendY = Math.max(0, height - margin.bottom - legendHeight);\n        break;\n      case \"bottom-right\":\n        legendX = Math.max(0, width - margin.right - legendWidth);\n        legendY = Math.max(0, height - margin.bottom - legendHeight);\n        break;\n      default:\n        // Default to top-right\n        legendX = Math.max(0, width - margin.right - legendWidth);\n        legendY = margin.top;\n    }\n\n    // Create the legend group\n    const legend = svg\n      .append(\"g\")\n      .attr(\"class\", \"legend-group\")\n      .attr(\"transform\", `translate(${legendX}, ${legendY})`);\n\n    // Add a background rectangle\n    legend\n      .append(\"rect\")\n      .attr(\"width\", legendWidth)\n      .attr(\"height\", legendHeight)\n      .attr(\"fill\", \"rgba(255, 255, 255, 0.95)\") // Increased opacity from 0.8 to 0.95\n      .attr(\"stroke\", \"#333\") // Added border\n      .attr(\"stroke-width\", 1) // Added border width\n      .attr(\"rx\", 4)\n      .attr(\"ry\", 4);\n\n    // Add legend entries\n    const legendEntries = legend\n      .selectAll(\".legend-entry\")\n      .data(items)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"legend-entry\")\n      .attr(\"transform\", (d, i) => `translate(10, ${10 + i * 25})`)\n      .attr(\"tabindex\", 0)\n      .attr(\"aria-label\", (d) => `Toggle ${d.label || \"item\"}`)\n      .on(\"click\", function (event, d) {\n        if (typeof clickHandler === \"function\") {\n          clickHandler(event, d);\n        }\n      })\n      .on(\"keypress\", (event, d) => {\n        if (\n          (event.key === \"Enter\" || event.key === \" \") &&\n          typeof clickHandler === \"function\"\n        ) {\n          clickHandler(event, d);\n        }\n      });\n\n    // Add colored rectangles for each entry\n    legendEntries\n      .append(\"rect\")\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"rx\", 3)\n      .attr(\"ry\", 3)\n      .attr(\"fill\", (d) => d.color || \"#ccc\")\n      .classed(\"disabled\", (d) => visibility.get(d.label) === false);\n\n    // Add text labels\n    legendEntries\n      .append(\"text\")\n      .attr(\"x\", 25)\n      .attr(\"y\", 12)\n      .text((d) => d.label || \"Unnamed\")\n      .attr(\"font-size\", 12);\n\n    return legend;\n  } catch (error) {\n    console.error(\"Error creating legend:\", error);\n    return d3.select(null); // Return empty selection on error\n  }\n}\n"],"names":["d3","preprocessChartData","data","options","arguments","length","undefined","Array","isArray","console","error","warn","processedData","JSON","parse","stringify","_options$normalize","normalize","_options$filter","filter","_options$custom","custom","forEach","col","trim","some","d","values","map","NaN","parseFloat","String","replace","v","isNaN","min","Math","apply","_toConsumableArray","max","concat","value","_objectSpread","_defineProperty","Object","entries","_ref","_ref2","_slicedToArray","condition","_typeof","customResult","hasMale","hasFemale","male","parseInt","Male","female","Female","Total","Cartogram","_ref$containerSelecto","containerSelector","_ref$width","width","_ref$height","height","_ref$margin","margin","top","right","bottom","left","_ref$gridPadding","gridPadding","_ref$labelFontSize","labelFontSize","_ref$labelPosition","labelPosition","_ref$gridFill","gridFill","_ref$hoverFill","hoverFill","_ref$borderColor","borderColor","_ref$borderRadius","borderRadius","_ref$showLegend","showLegend","_ref$legendPosition","legendPosition","_ref$gridLabelColumn","gridLabelColumn","_ref$chartLabelColumn","chartLabelColumn","_ref$animationDuratio","animationDuration","_ref$preprocessOption","preprocessOptions","_classCallCheck","this","container","select","empty","Error","gridData","chartData","gridSize","maxRow","maxCol","gridMap","Map","selectedGrid","customGlyphFunction","customGlyphConfig","legendVisibility","svg","attr","tooltip","document","createElement","append","style","createTooltip","setupExportButton","key","_this","button","on","svgNode","_svgNode$width","_svgNode$height","tagName","exportWidth","baseVal","exportHeight","svgString","XMLSerializer","serializeToString","match","canvas","ctx","getContext","img","Image","svgBlob","Blob","type","url","URL","createObjectURL","onload","fillStyle","fillRect","drawImage","pngUrl","toDataURL","link","fileName","Date","toISOString","slice","download","href","click","revokeObjectURL","log","alert","message","onerror","src","exportToPNG","node","_loadGridData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","csvText","plotWidth","plotHeight","labelExtraSpace","effectiveLabelFontSize","_this2","wrap","_context","prev","next","csvParse","sent","every","label","row","has","set","ceil","t0","displayError","stop","_x","_loadChartData","_callee2","_this3","_context2","abrupt","_x2","selectAll","remove","text","event","_this4","tooltipContent","get","_ref3","format","html","pageX","pageY","fn","_this5","config","legendItems","item","name","_this6","gridGroups","hoverHandler","outHandler","clickHandler","_ref$gridSize","_ref$labelMask","labelMask","_ref$labelMaskColor","labelMaskColor","_ref$labelMaskOpacity","labelMaskOpacity","_ref$labelDistance","labelDistance","_ref$selectedGrid","Number","isFinite","includes","enter","x","y","each","i","nodes","selection","safeGridSize","anchor","baseline","maxWidth","pos","labelPad","labelBoxH","displayLabel","estWidth","fontSize","chars","floor","renderGridCells","currentTarget","showTooltip","datum","isSelected","draw","chartDatum","bounds","items","idx","color","_ref$position","position","_ref$visibility","visibility","legendX","legendY","legendWidth","legendHeight","legend","legendEntries","classed","createLegend","isVisible"],"mappings":"+0SAMO,IAAMA,OCIN,SAASC,EAAoBC,GAAoB,IAAdC,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAA,EAElD,IAAKG,MAAMC,QAAQN,GAEjB,OADAO,QAAQC,MAAM,2CACP,GAIT,GAAoB,IAAhBR,EAAKG,OAEP,OADAI,QAAQE,KAAK,+CACN,GAIT,IAAIC,EAAgBC,KAAKC,MAAMD,KAAKE,UAAUb,IAC9Cc,EAAuDb,EAA/Cc,UAAAA,OAAY,IAAHD,EAAG,GAAEA,EAAAE,EAAiCf,EAA/BgB,OAAAA,OAAM,IAAAD,EAAG,CAAE,EAAAA,EAAAE,EAAoBjB,EAAlBkB,OAAAA,OAAS,IAAHD,EAAG,KAAIA,EAElD,IA+GE,GA7GAH,EAAUK,SAAQ,SAACC,GAEjB,GAAmB,iBAARA,GAAqBA,EAAIC,OAMpC,GAAKZ,EAAca,MAAK,SAACC,GAAC,OAAKH,KAAOG,CAAC,IAAvC,CAQA,IAAMC,EAASf,EACZgB,KAAI,SAACF,GAEJ,OAAe,OAAXA,EAAEH,SAA4BjB,IAAXoB,EAAEH,GAA2BM,IAGhC,iBAAXH,EAAEH,GACLG,EAAEH,GACFO,WAAWC,OAAOL,EAAEH,IAAMS,QAAQ,KAAM,IAEhD,IACCb,QAAO,SAACc,GAAC,OAAMC,MAAMD,MAGxB,GAAsB,IAAlBN,EAAOtB,OAAX,CAMA,IAAM8B,EAAMC,KAAKD,IAAGE,MAARD,KAAIE,EAAQX,IAClBY,EAAMH,KAAKG,IAAGF,MAARD,KAAIE,EAAQX,IAGpBY,GAAOJ,EACT1B,QAAQE,KAAI,4BAAA6B,OACkBjB,iCAMhCX,EAAgBA,EAAcgB,KAAI,SAACF,GACjC,IAAMe,EACc,iBAAXf,EAAEH,GACLG,EAAEH,GACFO,WAAWC,OAAOL,EAAEH,IAAMS,QAAQ,KAAM,KAE9C,OAAAU,EAAAA,EAAA,GACKhB,GAAC,GAAAiB,EAAA,CAAA,EACHpB,EAAMW,MAAMO,GAASf,EAAEH,IAAQkB,EAAQN,IAAQI,EAAMJ,IAE1D,GAzBA,MAFE1B,QAAQE,KAAI,wCAAA6B,OAAyCjB,OAlBvD,MAJEd,QAAQE,KAAI,WAAA6B,OACCjB,wDAPbd,QAAQE,KAAK,wCAwDjB,IAGAiC,OAAOC,QAAQ1B,GAAQG,SAAQ,SAAAwB,GAAsB,IAAAC,EAAAC,EAAAF,EAAA,GAApBvB,EAAGwB,EAAA,GAAEE,EAASF,EAAA,GAE1B,iBAARxB,GAAqBA,EAAIC,OAM/BZ,EAAca,MAAK,SAACC,GAAC,OAAKH,KAAOG,CAAC,IAMvCd,EAAgBA,EAAcO,QAAO,SAACO,GAEpC,GAAe,OAAXA,EAAEH,SAA4BjB,IAAXoB,EAAEH,GACvB,OAAO,EAIT,IAAMkB,EACc,iBAAXf,EAAEH,GACLG,EAAEH,GACFO,WAAWC,OAAOL,EAAEH,IAAMS,QAAQ,KAAM,KAG9C,QAAIE,MAAMO,KAGe,iBAAdQ,EAA+BR,GAASQ,GAG/CA,GAAkC,WAArBC,EAAOD,WACA3C,IAAlB2C,EAAUd,KAAqBM,EAAQQ,EAAUd,aAE/B7B,IAAlB2C,EAAUV,KAAqBE,EAAQQ,EAAUV,KAOzD,IAlCE9B,QAAQE,KAAI,WAAA6B,OAAYjB,+CANxBd,QAAQE,KAAK,oCAyCjB,IAGIU,EACF,GAAsB,mBAAXA,EACTZ,QAAQE,KAAK,yDAEb,IACE,IAAMwC,EAAe9B,EAAOT,GACxBL,MAAMC,QAAQ2C,GAChBvC,EAAgBuC,EAEhB1C,QAAQC,MAAM,qDAEjB,CAAC,MAAOA,GACPD,QAAQC,MAAM,0CAA2CA,EAC3D,CAyBJ,OApBAE,EAAgBA,EAAcgB,KAAI,SAACF,GACjC,IAEE,IAAM0B,EAAU,SAAU1B,EACpB2B,EAAY,WAAY3B,EAE9B,GAAI0B,GAAWC,EAAW,CACxB,IAAMC,EAAOF,GAAUG,SAAS7B,EAAE8B,OAAa,EACzCC,EAASJ,GAAYE,SAAS7B,EAAEgC,SAAe,EACrD,OAAAhB,EAAAA,EAAA,CAAA,EACKhB,GAAC,CAAA,EAAA,CACJiC,MAAOL,EAAOG,GAElB,CACD,CAAC,MAAO/C,GACPD,QAAQE,KAAK,4BAA6BD,EAC5C,CACA,OAAOgB,CACT,GAGD,CAAC,MAAOhB,GAEP,OADAD,QAAQC,MAAM,6BAA8BA,GACrCR,CACT,CACF,CC1Ka0D,IAAAA,EAAS,WAkFpB,SA7EA,SAAAA,EAAAd,GAkBG,IAAAe,EAAAf,EAjBDgB,kBAAAA,OAAoB,IAAHD,EAAG,uBAAsBA,EAAAE,EAAAjB,EAC1CkB,MAAAA,OAAQ,IAAHD,EAAG,KAAIA,EAAAE,EAAAnB,EACZoB,OAAAA,OAAS,IAAHD,EAAG,IAAIA,EAAAE,EAAArB,EACbsB,OAAAA,OAAS,IAAHD,EAAG,CAAEE,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAIL,EAAAM,EAAA3B,EACrD4B,YAAAA,OAAc,IAAHD,EAAG,EAACA,EAAAE,EAAA7B,EACf8B,cAAAA,OAAgB,IAAHD,EAAG,GAAEA,EAAAE,EAAA/B,EAClBgC,cAAAA,OAAgB,IAAHD,EAAG,MAAKA,EAAAE,EAAAjC,EACrBkC,SAAAA,OAAW,IAAHD,EAAG,UAASA,EAAAE,EAAAnC,EACpBoC,UAAAA,OAAY,IAAHD,EAAG,UAASA,EAAAE,EAAArC,EACrBsC,YAAAA,OAAc,IAAHD,EAAG,OAAMA,EAAAE,EAAAvC,EACpBwC,aAAAA,OAAe,IAAHD,EAAG,EAACA,EAAAE,EAAAzC,EAChB0C,WAAAA,OAAa,IAAHD,GAAOA,EAAAE,EAAA3C,EACjB4C,eAAAA,OAAiB,IAAHD,EAAG,YAAWA,EAAAE,EAAA7C,EAC5B8C,gBAAAA,OAAkB,IAAHD,EAAG,QAAOA,EAAAE,EAAA/C,EACzBgD,iBAAAA,OAAmB,IAAHD,EAAG,QAAOA,EAAAE,EAAAjD,EAC1BkD,kBAAAA,OAAoB,IAAHD,EAAG,IAAGA,EAAAE,EAAAnD,EACvBoD,kBAAAA,OAAiB,IAAAD,EAAG,CAAA,EAAEA,EAItB,+FAJsBE,MAAAvC,GAGtBwC,KAAKC,UAAYrG,EAAGsG,OAAOxC,GACvBsC,KAAKC,UAAUE,QACjB,MAAM,IAAIC,MAAK,4BAAAhE,OACesB,mBAoChC,GA/BAsC,KAAKpC,MAAQA,EACboC,KAAKlC,OAASA,EACdkC,KAAKhC,OAASA,EACdgC,KAAK1B,YAAcA,EACnB0B,KAAKxB,cAAgBA,EACrBwB,KAAKtB,cAAgBA,EACrBsB,KAAKpB,SAAWA,EAChBoB,KAAKlB,UAAYA,EACjBkB,KAAKhB,YAAcA,EACnBgB,KAAKd,aAAeA,EACpBc,KAAKZ,WAAaA,EAClBY,KAAKV,eAAiBA,EACtBU,KAAKR,gBAAkBA,EACvBQ,KAAKN,iBAAmBA,EACxBM,KAAKJ,kBAAoBA,EACzBI,KAAKF,kBAAoBA,EAGzBE,KAAKK,SAAW,GAChBL,KAAKM,UAAY,KACjBN,KAAKO,SAAW,EAChBP,KAAKQ,OAAS,EACdR,KAAKS,OAAS,EACdT,KAAKU,QAAU,IAAIC,IACnBX,KAAKY,aAAe,KACpBZ,KAAKa,oBAAsB,KAC3Bb,KAAKc,kBAAoB,KACzBd,KAAKe,iBAAmB,IAAIJ,IAG5BX,KAAKgB,IAAMhB,KAAKC,UAAUC,OAAO,kBAC7BF,KAAKgB,IAAIb,QACX,MAAM,IAAIC,MACR,kEAGJJ,KAAKgB,IACFC,KAAK,UAAS7E,OAAAA,OAASwB,OAAKxB,OAAI0B,IAChCmD,KAAK,sBAAuB,iBAC5BA,KAAK,OAAQ,OACbA,KAAK,aAAc,2BAGtBjB,KAAKkB,QC7EF,SAAuBjB,GAE5B,IAAKA,GAAaA,EAAUE,QAE1B,OADA9F,QAAQC,MAAM,iCACPV,EAAGsG,OAAOiB,SAASC,cAAc,QAG1C,IACE,IAAIF,EAAUjB,EAAUC,OAAO,YAgB/B,OAdIgB,EAAQf,UACVe,EAAUjB,EACPoB,OAAO,OACPJ,KAAK,QAAS,WACdK,MAAM,UAAW,QACjBA,MAAM,WAAY,YAClBA,MAAM,aAAc,6BACpBA,MAAM,UAAW,OACjBA,MAAM,gBAAiB,OACvBA,MAAM,aAAc,gCACpBA,MAAM,iBAAkB,QACxBA,MAAM,UAAW,SAGfJ,CACR,CAAC,MAAO5G,GAEP,OADAD,QAAQC,MAAM,0BAA2BA,GAClCV,EAAGsG,OAAOiB,SAASC,cAAc,OAC1C,CACF,CDgDmBG,CAAcvB,KAAKC,WAGlCD,KAAKwB,mBACP,IAEA,CAAA,CAAAC,IAAA,oBAAApF,MAIA,WAAoB,IAAAqF,EAAA1B,KACZ2B,EAAS3B,KAAKC,UAAUC,OAAO,kBACjCyB,EAAOxB,QACT9F,QAAQE,KAAK,mDAIfoH,EAAOC,GAAG,SAAS,YE9FhB,SAAqBC,EAASjE,EAAOE,GAC1C,IAAI,IAAAgE,EAAAC,EAEF,IAAKF,GAA+B,QAApBA,EAAQG,QACtB,MAAM,IAAI5B,MAAM,8BAIlB,IAAM6B,EAAcjG,KAAKG,IACvB,GACAyB,IAAsBkE,QAAjBA,EAAID,EAAQjE,aAAKkE,IAAAA,GAAS,QAATA,EAAbA,EAAeI,eAAO,IAAAJ,OAAA,EAAtBA,EAAwBzF,QAAS,KAEtC8F,EAAenG,KAAKG,IACxB,GACA2B,IAAwBiE,QAAlBA,EAAIF,EAAQ/D,cAAMiE,IAAAA,GAAS,QAATA,EAAdA,EAAgBG,eAAO,IAAAH,OAAA,EAAvBA,EAAyB1F,QAAS,KAK1C+F,GADe,IAAIC,eACIC,kBAAkBT,GAI1CO,EAAUG,MAAM,wDAEjBH,EAAYA,EAAUxG,QACpB,QACA,4CAKJ,IAAM4G,EAASrB,SAASC,cAAc,UAChCqB,EAAMD,EAAOE,WAAW,MACxBC,EAAM,IAAIC,MAGVC,EAAU,IAAIC,KAAK,CAACV,GAAY,CACpCW,KAAM,gCAEFC,EAAMC,IAAIC,gBAAgBL,GAEhCF,EAAIQ,OAAS,WACX,IAEEX,EAAO5E,MAAQqE,EACfO,EAAO1E,OAASqE,EAGhBM,EAAIW,UAAY,QAChBX,EAAIY,SAAS,EAAG,EAAGpB,EAAaE,GAGhCM,EAAIa,UAAUX,EAAK,EAAG,EAAGV,EAAaE,GAGtC,IAAMoB,EAASf,EAAOgB,UAAU,aAG1BC,EAAOtC,SAASC,cAAc,KAC9BsC,EAAQtH,aAAAA,QAAgB,IAAIuH,MAC/BC,cACAC,MAAM,EAAG,IAAS,QACrBJ,EAAKK,SAAWJ,EAChBD,EAAKM,KAAOR,EACZE,EAAKO,QAGLf,IAAIgB,gBAAgBjB,GACpB3I,QAAQ6J,IAAG,YAAA9H,OAAasH,oBACzB,CAAC,MAAOpJ,GACPD,QAAQC,MAAM,wBAAyBA,GACvC6J,8CAAK/H,OAAyC9B,EAAM8J,UACpDnB,IAAIgB,gBAAgBjB,EACtB,GAGFL,EAAI0B,QAAU,SAAC/J,GACbD,QAAQC,MAAM,uCAAwCA,GACtD6J,MAAM,qDACNlB,IAAIgB,gBAAgBjB,IAItBL,EAAI2B,IAAMtB,CACX,CAAC,MAAO1I,GACPD,QAAQC,MAAM,iBAAkBA,GAChC6J,wBAAK/H,OAAmB9B,EAAM8J,SAChC,CACF,CFMMG,CAAY7C,EAAKV,IAAIwD,OAAQ9C,EAAK9D,MAAO8D,EAAK5D,OAChD,GACF,GAEA,CAAA2D,IAAA,eAAApF,OAAAoI,EAAAC,EAAAC,IAAAC,MAIA,SAAAC,EAAmBC,GAAO,IAAAhL,EAAAiL,EAAAC,EAAAC,EAAAC,EAAAC,EAAAnF,KAAA,OAAA2E,IAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAF,EAAAC,KAAA,EAEjBR,GAA8B,iBAAZA,GAA2C,KAAnBA,EAAQ1J,OAAa,CAAAiK,EAAAE,KAAA,EAAA,KAAA,CAAA,MAC5D,IAAInF,MAAM,sCAAqC,KAAA,EAAA,OAAAiF,EAAAE,KAAA,EAGpC3L,EAAG4L,SAASV,GAAQ,KAAA,EAA7B,IAAJhL,EAAIuL,EAAAI,MAEFC,OACJ,SAACpK,GAAC,OAAK6J,EAAK3F,mBAAmBlE,GAAK,QAASA,GAAK,QAASA,CAAC,IAC7D,CAAA+J,EAAAE,KAAA,EAAA,KAAA,CAAA,MAEK,IAAInF,MAAKhE,0BAAAA,OACa4D,KAAKR,gBAAe,iCAC/C,KAAA,EAsCgB,GAnCnBQ,KAAKK,SAAWvG,EAAK0B,KAAI,SAACF,GAAC,MAAM,CAC/BqK,MAAOrK,EAAE6J,EAAK3F,kBAAoB,GAClCoG,IAAKzI,SAAS7B,EAAEsK,KAChBzK,IAAKgC,SAAS7B,EAAEH,KACjB,IAGD6E,KAAKK,SAASnF,SAAQ,SAACI,GACrB,GAAIQ,MAAMR,EAAEsK,MAAQ9J,MAAMR,EAAEH,MAAQG,EAAEsK,IAAM,GAAKtK,EAAEH,IAAM,EACvD,MAAM,IAAIiF,MAAKhE,iCAAAA,OAAkCd,EAAEqK,MAAK,OAE1D,IAAMlE,EAAG,GAAArF,OAAMd,EAAEsK,IAAG,KAAAxJ,OAAId,EAAEH,KAC1B,GAAIgK,EAAKzE,QAAQmF,IAAIpE,GACnB,MAAM,IAAIrB,MAAKhE,kCAAAA,OACqBd,EAAEsK,IAAG,UAAAxJ,OAASd,EAAEH,UAGtDgK,EAAKzE,QAAQoF,IAAIrE,EAAKnG,EACxB,IAEA0E,KAAKQ,OAASxE,KAAKG,IAAGF,MAARD,KAAIE,EAAQ8D,KAAKK,SAAS7E,KAAI,SAACF,GAAC,OAAKA,EAAEsK,GAAG,KAACxJ,OAAE,CAAA,KAC3D4D,KAAKS,OAASzE,KAAKG,IAAGF,MAARD,KAAIE,EAAQ8D,KAAKK,SAAS7E,KAAI,SAACF,GAAC,OAAKA,EAAEH,GAAG,KAACiB,OAAE,CAAA,KAGrD2I,EAAY/E,KAAKpC,MAAQoC,KAAKhC,OAAOI,KAAO4B,KAAKhC,OAAOE,MAC1D8G,EAAahF,KAAKlC,OAASkC,KAAKhC,OAAOC,IAAM+B,KAAKhC,OAAOG,OACzD8G,EAAkB,EACK,WAAvBjF,KAAKtB,eAAqD,QAAvBsB,KAAKtB,gBAEpCwG,EAAyBlJ,KAAKD,IAAI,GAAIiE,KAAKxB,eAAiB,IAClEyG,EAAkBjJ,KAAK+J,KAA8B,IAAzBb,GAC5BF,IAAehF,KAAKQ,OAAS,GAAKyE,GAEpCjF,KAAKO,SACHvE,KAAKD,IAAIgJ,EAAY/E,KAAKS,OAAQuE,EAAahF,KAAKQ,QACpDR,KAAK1B,cAEH0B,KAAKO,UAAY,GAAC,CAAA8E,EAAAE,KAAA,GAAA,KAAA,CAAA,MACd,IAAInF,MACR,kFACD,KAAA,GAGH/F,QAAQ6J,IACN,iCACAlE,KAAKK,SAASpG,OACd,WACAoL,EAAAE,KAAA,GAAA,MAAA,KAAA,GAG+B,MAH/BF,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,MAAA,GAEFhL,QAAQC,MAAM,4BAA2B+K,EAAAW,IACzChG,KAAKiG,aAAaZ,EAAAW,GAAM5B,SAASiB,EAAAW,GAAA,KAAA,GAAA,IAAA,MAAA,OAAAX,EAAAa,OAAA,GAAArB,EAAA7E,KAAA,CAAA,CAAA,EAAA,KAGpC,KAAA,SAtEiBmG,GAAA,OAAA1B,EAAAxI,MAAA+D,KAAAhG,UAAA,IAwElB,CAAAyH,IAAA,gBAAApF,OAAA+J,EAAA1B,EAAAC,IAAAC,MAIA,SAAAyB,EAAoBvB,GAAO,IAAAhL,EAAAU,EAAA8L,EAAAtG,KAAA,OAAA2E,IAAAS,MAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,KAAA,EAAA,GAAAgB,EAAAjB,KAAA,EAElBR,GAA8B,iBAAZA,GAA2C,KAAnBA,EAAQ1J,OAAa,CAAAmL,EAAAhB,KAAA,EAAA,KAAA,CAI5C,OAHtBlL,QAAQE,KACN,4DAEFyF,KAAKM,UAAY,KAAKiG,EAAAC,OAAA,UAAA,KAAA,EAAA,OAAAD,EAAAhB,KAAA,EAIL3L,EAAG4L,SAASV,GAAQ,KAAA,EAA7B,IAAJhL,EAAIyM,EAAAd,MACAC,OAAM,SAACpK,GAAC,OAAKgL,EAAK5G,oBAAoBpE,KAAE,CAAAiL,EAAAhB,KAAA,GAAA,KAAA,CAAA,MAC1C,IAAInF,MAAKhE,2BAAAA,OACc4D,KAAKN,iBAAgB,cACjD,KAAA,GAIGlF,EAAgBX,EAAoBC,EAAMkG,KAAKF,mBACrDE,KAAKM,UAAY,IAAIK,IACnBnG,EAAcgB,KAAI,SAACF,GAAC,MAAK,CAACA,EAAEgL,EAAK5G,kBAAmBpE,EAAE,KAExDjB,QAAQ6J,IACN,kCACA1J,EAAcP,OACd,WACAsM,EAAAhB,KAAA,GAAA,MAAA,KAAA,GAAAgB,EAAAjB,KAAA,GAAAiB,EAAAP,GAAAO,EAAA,MAAA,GAEFlM,QAAQC,MAAM,6BAA4BiM,EAAAP,IAC1ChG,KAAKM,UAAY,KAAK,KAAA,GAAA,IAAA,MAAA,OAAAiG,EAAAL,OAAA,GAAAG,EAAArG,KAAA,CAAA,CAAA,EAAA,KAEzB,KAAA,SA/BkByG,GAAA,OAAAL,EAAAnK,MAAA+D,KAAAhG,UAAA,IAiCnB,CAAAyH,IAAA,eAAApF,MAKA,SAAa+H,GACXpE,KAAKgB,IAAI0F,UAAU,KAAKC,SACxB3G,KAAKgB,IACFK,OAAO,QACPJ,KAAK,QAAS,iBACdA,KAAK,IAAKjB,KAAKpC,MAAQ,GACvBqD,KAAK,IAAKjB,KAAKlC,OAAS,GACxB8I,KAAKxC,EACV,GAEA,CAAA3C,IAAA,cAAApF,MAMA,SAAYwK,EAAOvL,GAAG,IAAAwL,EAAA9G,KACpB,GAAK6G,GAAUvL,GAAM0E,KAAKkB,QAA1B,CAKA,IAAMyE,EAAQrK,EAAEqK,OAAS,UACrBoB,EAAiBpB,EAGrB,GAAI3F,KAAKM,WAAaN,KAAKM,UAAU0G,IAAIrB,GAAQ,CAC/C,IAAM7L,EAAOkG,KAAKM,UAAU0G,IAAIrB,GAChC,IACEnJ,OAAOC,QAAQ3C,GAAMoB,SAAQ,SAAAyB,GAAkB,IAAAsK,EAAArK,EAAAD,EAAA,GAAhB8E,EAAGwF,EAAA,GAAE5K,EAAK4K,EAAA,GACnCxF,IAAQqF,EAAKpH,mBACfqH,GAAc,OAAA3K,OAAWqF,EAAG,MAAArF,OACT,iBAAVC,EAAqBzC,EAAGsN,OAAO,IAAVtN,CAAeyC,GAASA,GAAS,OAGnE,GACD,CAAC,MAAO/B,GACPD,QAAQC,MAAM,oCAAqCA,EACrD,CACF,CAGA,IACE0F,KAAKkB,QACFiG,KAAKJ,GACLzF,MAAM,UAAW,SACjBA,MAAM,OAAM,GAAAlF,QAAMyK,EAAMO,OAAS,GAAK,UACtC9F,MAAM,MAAK,GAAAlF,QAAMyK,EAAMQ,OAAS,GAAK,GAAE,MAC3C,CAAC,MAAO/M,GACPD,QAAQC,MAAM,yBAA0BA,GACxC0F,KAAKkB,QAAQI,MAAM,UAAW,OAChC,CAhCA,CAiCF,GAEA,CAAAG,IAAA,yBAAApF,MAKA,SAAuBiL,GAAiB,IAAAC,EAAAvH,KAAbwH,EAAMxN,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAA,EAChB,mBAAPsN,GAKXtH,KAAKa,oBAAsByG,EAC3BtH,KAAKc,kBAAoB0G,EAErBA,EAAOC,aACTD,EAAOC,YAAYvM,SAAQ,SAACwM,GACrBH,EAAKxG,iBAAiB8E,IAAI6B,EAAK/B,QAClC4B,EAAKxG,iBAAiB+E,IAAI4B,EAAK/B,OAAO,EAE1C,IAGFtL,QAAQ6J,IAAI,6BAA8BoD,EAAGK,MAAQ,cAfnDtN,QAAQE,KAAK,sDAgBjB,GAEA,CAAAkH,IAAA,OAAApF,MAGA,WAAO,IAAAuL,EAAA5H,KACL,GAAKA,KAAKK,SAASpG,OAAnB,CAMA+F,KAAKgB,IAAI0F,UAAU,KAAKC,SAGxB,IAAMkB,EGrSH,SACL7G,EACAX,EACAtG,EACA+N,EACAC,EACAC,GAGA,IAAKhH,GAAOA,EAAIb,QAEd,OADA9F,QAAQC,MAAM,wCACPV,EAAGsG,OAAO,MAGnB,IAAK/F,MAAMC,QAAQiG,IAAiC,IAApBA,EAASpG,OAEvC,OADAI,QAAQC,MAAM,8BACPV,EAAGsG,OAAO,MAInB,IAAAxD,EAeI3C,GAAW,CAAE,EAAAgE,EAAArB,EAdfsB,OAAAA,OAAS,IAAHD,EAAG,CAAEE,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAIL,EAAAkK,EAAAvL,EACrD6D,SAAAA,OAAW,IAAH0H,EAAG,GAAEA,EAAA5J,EAAA3B,EACb4B,YAAAA,OAAc,IAAHD,EAAG,EAACA,EAAAY,EAAAvC,EACfwC,aAAAA,OAAe,IAAHD,EAAG,EAACA,EAAAV,EAAA7B,EAChB8B,cAAAA,OAAgB,IAAHD,EAAG,GAAEA,EAAAE,EAAA/B,EAClBgC,cAAAA,OAAgB,IAAHD,EAAG,MAAKA,EAAAyJ,EAAAxL,EACrByL,UAAAA,OAAY,IAAHD,GAAQA,EAAAE,EAAA1L,EACjB2L,eAAAA,OAAiB,IAAHD,EAAG,OAAMA,EAAAE,EAAA5L,EACvB6L,iBAAAA,OAAmB,IAAHD,EAAG,GAAGA,EAAAE,EAAA9L,EACtB+L,cAAAA,OAAgB,IAAHD,EAAG,KAAIA,EAAA7J,EAAAjC,EACpBkC,SAAAA,OAAW,IAAHD,EAAG,UAASA,EAAAE,EAAAnC,EACpBoC,UAAAA,OAAY,IAAHD,EAAG,UAASA,EAAAE,EAAArC,EACrBsC,YAAAA,OAAc,IAAHD,EAAG,OAAMA,EAAA2J,EAAAhM,EACpBkE,aAAAA,OAAe,IAAH8H,EAAG,KAAIA,EAIjBzD,EAAkB,EAClBC,EAAyB1G,IAExBmK,OAAOC,SAAS1D,IAA2BA,GAA0B,KACxEA,EAAyB,IAGzB,CAAC,SAAU,MAAO,cAAe,kBAAkB2D,SAASnK,KAE5DwG,EAAyBlJ,KAAKD,IAAI,GAAIyC,GAAiB,GAAe,IAAX+B,GAC3D0E,EAAkBjJ,KAAK+J,KAA8B,IAAzBb,IAI9B,IACE,IAAM2C,EAAa7G,EAChB0F,UAAU,eACV5M,KAAKuG,GACLyI,QACAzH,OAAO,KACPJ,KAAK,QAAS,cACdA,KAAK,aAAa,SAAC3F,GAElB,IAAMsK,EAAMtK,EAAEsK,MAAQ9J,MAAMR,EAAEsK,KAAOtK,EAAEsK,IAAM,EACvCzK,EAAMG,EAAEH,MAAQW,MAAMR,EAAEH,KAAOG,EAAEH,IAAM,EACvC4N,EAAI/K,EAAOI,MAAQjD,EAAM,IAAMoF,EAAWjC,GAE1C0K,EACJhL,EAAOC,KAAO2H,EAAM,IAAMrF,EAAWjC,EAAc2G,GACrD,MAAA,aAAA7I,OAAoB2M,EAAC3M,MAAAA,OAAK4M,EAAC,IAC7B,IACC/H,KAAK,WAAY,GACjBA,KAAK,cAAc,SAAC3F,GAAC,MAAA,cAAAc,OAAmBd,EAAEqK,OAAS,UAAW,IAC9D/D,GAAG,aAAa,SAAUiF,EAAOvL,GACJ,mBAAjBwM,GACTA,EAAajB,EAAOvL,EAEvB,IACAsG,GAAG,YAAY,SAAUiF,EAAOvL,GACL,mBAAfyM,GACTA,EAAWlB,EAAOvL,EAErB,IACAsG,GAAG,SAAS,SAAUiF,EAAOvL,GACA,mBAAjB0M,GACTA,EAAanB,EAAOvL,EAEvB,IACAsG,GAAG,YAAY,SAACiF,EAAOvL,GAEL,UAAduL,EAAMpF,KAAiC,MAAdoF,EAAMpF,KACR,mBAAjBuG,GAEPA,EAAanB,EAAOvL,EAExB,IAyKF,OAtKAuM,EACGxG,OAAO,QACPJ,KAAK,QAAS,aACdA,KAAK,QAASjF,KAAKG,IAAI,EAAGoE,IAC1BU,KAAK,SAAUjF,KAAKG,IAAI,EAAGoE,IAC3BU,KAAK,KAAM/B,GAAgB,GAC3B+B,KAAK,KAAM/B,GAAgB,GAC3B+B,KAAK,QAAQ,SAAC3F,GACb,OAAIsF,GAAgBA,IAAYxE,GAAAA,OAAQd,EAAEsK,IAAG,KAAAxJ,OAAId,EAAEH,KAC1C2D,EAEFF,CACR,IACAqC,KAAK,SAAUjC,GAAe,QAGjC6I,EAAWoB,MAAK,SAAC3N,EAAG4N,EAAGC,GACrB,IACE,IAAMC,EAAYxP,EAAGsG,OAAOiJ,EAAMD,IAC5BG,EAAerN,KAAKG,IAAI,GAAIoE,GAC9BwI,EAAIM,EAAe,EACrBL,EAAIK,EAAe,EACnBC,EAAS,SACTC,EAAW,SACXC,EAA0B,GAAfH,EAEPI,EAA+B,iBAAlB/K,EAA6BA,EAAgB,MAI1DgL,EACc,OAAlBjB,GAA0BE,OAAOC,SAASH,GACtCA,EACAzM,KAAKG,IAAI,EAAiB,GAAdmC,GACZqL,EAAqC,IAAzBzE,EAElB,OAAQuE,GACN,IAAK,MA2EL,QACEV,EAAIM,EAAe,EACnBL,GAAKU,EACLJ,EAAS,SACTC,EAAW,aACXC,EAA0B,IAAfH,QAzEb,IAAK,SACHN,EAAIM,EAAe,EACnBL,EAAIK,EAAeM,EAAYD,EAAW,EAC1CJ,EAAS,SACTC,EAAW,UACXC,EAA0B,IAAfH,EACX,MACF,IAAK,OACHN,GAAKW,EACLV,EAAIK,EAAe,EACnBC,EAAS,MACTC,EAAW,SACXC,EAA0B,IAAfH,EACX,MACF,IAAK,QACHN,EAAIM,EAAeK,EACnBV,EAAIK,EAAe,EACnBC,EAAS,QACTC,EAAW,SACXC,EAA0B,IAAfH,EACX,MACF,IAAK,SACHN,EAAIM,EAAe,EACnBL,EAAIK,EAAe,EACnBC,EAAS,SACTC,EAAW,SACXC,EAA0B,GAAfH,EACX,MACF,IAAK,cACHN,EAAIM,EAAe,EACnBL,IAAwB,OAAlBP,GAA0BE,OAAOC,SAASH,GAC5CA,EACAnK,GACJgL,EAAS,SACTC,EAAW,aACXC,EAA0B,IAAfH,EACX,MACF,IAAK,iBACHN,EAAIM,EAAe,EACnBL,EACEK,GACmB,OAAlBZ,GAA0BE,OAAOC,SAASH,GACvCA,EACAnK,GACNgL,EAAS,SACTC,EAAW,UACXC,EAA0B,IAAfH,EACX,MACF,IAAK,eACHN,IAAwB,OAAlBN,GAA0BE,OAAOC,SAASH,GAC5CA,EACAnK,GACJ0K,EAAIK,EAAe,EACnBC,EAAS,MACTC,EAAW,SACXC,EAA0B,IAAfH,EACX,MACF,IAAK,gBACHN,EACEM,GACmB,OAAlBZ,GAA0BE,OAAOC,SAASH,GACvCA,EACAnK,GACN0K,EAAIK,EAAe,EACnBC,EAAS,QACTC,EAAW,SACXC,EAA0B,IAAfH,EASf,IAAI1D,EAAQrK,GAAKA,EAAEqK,MAAQhK,OAAOL,EAAEqK,OAAS,GACzCiE,EAAejE,EAEbkE,GAxOmBC,EAwOiB5E,EAAPS,EAvO7B1L,QAAqB,GAAX6P,IAwOhB,GAAID,EAAWL,EAAU,CACvB,IAAIO,EAAQ/N,KAAKgO,MAAOR,EAAWK,EAAYlE,EAAM1L,QAAU,EAC3D8P,EAAQ,IAAGA,EAAQ,GACvBH,EAAejE,EAAM9B,MAAM,EAAGkG,GAAS,GACzC,CAEI5B,GAAayB,GACfR,EACG/H,OAAO,QACPJ,KAAK,QAAS,mBACdA,KAAK,IAAK8H,EAAIS,EAAW,GACzBvI,KAAK,IAAK+H,EAA6B,GAAzB9D,GACdjE,KAAK,QAASuI,GACdvI,KAAK,SAAmC,IAAzBiE,GACfjE,KAAK,OAAQoH,GACbpH,KAAK,UAAWsH,GAGRa,EACV/H,OAAO,QACPJ,KAAK,QAAS,cACdA,KAAK,IAAK8H,GACV9H,KAAK,IAAK+H,GACV/H,KAAK,cAAeqI,GACpBrI,KAAK,oBAAqBsI,GAC1BtI,KAAK,YAAaiE,GAClB0B,KAAKgD,GACLtI,MAAM,SAAUuI,EAAWL,EAAW,UAAY,MAClD5H,GAAG,aAAa,WACXiI,EAAWL,GACb5P,EAAGsG,OAAOF,MAAMqB,OAAO,SAASuF,KAAKjB,EAEzC,GACH,CAAC,MAAOrL,GAEPD,QAAQC,MAAK,wCAAA8B,OAET9B,GAASA,EAAM8J,QAAU9J,EAAM8J,QAAU9J,GAG/C,CAjRN,IAAiCwP,CAkR7B,IAEOjC,CACR,CAAC,MAAOvN,GAEP,OADAD,QAAQC,MAAM,8BAA+BA,GACtCV,EAAGsG,OAAO,KACnB,CACF,CH0BuB+J,CACjBjK,KAAKgB,IACLhB,KAAKK,SACL,CACErC,OAAQgC,KAAKhC,OACbuC,SAAUP,KAAKO,SACfjC,YAAa0B,KAAK1B,YAClBY,aAAcc,KAAKd,aACnBV,cAAewB,KAAKxB,cACpBE,cAAesB,KAAKtB,cACpBE,SAAUoB,KAAKpB,SACfE,UAAWkB,KAAKlB,UAChBE,YAAagB,KAAKhB,YAClB4B,aAAcZ,KAAKY,eAErB,SAACiG,EAAOvL,GAEN1B,EAAGsG,OAAO2G,EAAMqD,eACbhK,OAAO,cACPe,KAAK,OAAQ2G,EAAK9I,WACrB8I,EAAKuC,YAAYtD,EAAOvL,EACzB,IACD,SAACuL,GAEC,IAAMvL,EAAI1B,EAAGsG,OAAO2G,EAAMqD,eAAeE,QACnCC,EAAazC,EAAKhH,kBAAYxE,OAAQd,EAAEsK,IAAGxJ,KAAAA,OAAId,EAAEH,KACvDvB,EAAGsG,OAAO2G,EAAMqD,eACbhK,OAAO,cACPe,KAAK,OAAQoJ,EAAazC,EAAK9I,UAAY8I,EAAKhJ,UACnDgJ,EAAK1G,QAAQI,MAAM,UAAW,OAChC,IACA,SAACuF,EAAOvL,GAENsM,EAAKhH,aAAYxE,GAAAA,OAAMd,EAAEsK,IAAG,KAAAxJ,OAAId,EAAEH,KAClCyM,EAAK0C,MACP,IAIEtK,KAAKa,qBAAuBb,KAAKM,WACnCuH,EAAWoB,MAAK,SAAC3N,EAAG4N,EAAGC,GACrB,IAAMoB,EAAa3C,EAAKtH,UAAU0G,IAAI1L,EAAEqK,OACxC,GAAI4E,EAAY,CACd,IAAMnB,EAAYxP,EACfsG,OAAOiJ,EAAMD,IACb7H,OAAO,KACPJ,KAAK,QAAS,eACjB,IAEE,IAAMuJ,EAAS,CACbzB,EAAG,EACHC,EAAG,EACHpL,MAAOgK,EAAKrH,SACZzC,OAAQ8J,EAAKrH,UAIfqH,EAAK/G,oBAAoBuI,EAAWoB,EAAQD,EAAUjO,EAAAA,EACjDsL,GAAAA,EAAK9G,mBAAiB,CAAA,EAAA,CACzBC,iBAAkB6G,EAAK7G,iBACvBnB,kBAAmBgI,EAAKhI,oBAE3B,CAAC,MAAOtF,GACPD,QAAQC,MAAK,8BAAA8B,OAA+Bd,EAAEqK,MAAWrL,MAAAA,GAEzD8O,EACG/H,OAAO,QACPJ,KAAK,IAAK2G,EAAKrH,SAAW,GAC1BU,KAAK,IAAK2G,EAAKrH,SAAW,GAC1BU,KAAK,cAAe,UACpBA,KAAK,OAAQ,OACb2F,KAAK,KACV,CACF,CACF,IAKA5G,KAAKZ,YACLY,KAAKa,qBACLb,KAAKc,mBACLd,KAAKc,kBAAkB2G,cAGvBzH,KAAKgB,IAAI0F,UAAU,iBAAiBC,SIvYnC,SAAsB3F,EAAKyJ,EAAO1Q,EAASiO,GAEhD,IAAKhH,GAAOA,EAAIb,QAEd,OADA9F,QAAQC,MAAM,oCACPV,EAAGsG,OAAO,MAGnB,IAAK/F,MAAMC,QAAQqQ,IAA2B,IAAjBA,EAAMxQ,OAEjC,OADAI,QAAQE,KAAK,4BACNX,EAAGsG,OAAO,MAInBuK,EAAMvP,SAAQ,SAACwM,EAAMgD,GACdhD,EAAK/B,OAAwB,KAAf+B,EAAK/B,QAClB+B,EAAKrL,MACPqL,EAAK/B,MAAQhK,OAAO+L,EAAKrL,OAChBqL,EAAKiD,MACdjD,EAAK/B,MAAQhK,OAAO+L,EAAKiD,OAEzBjD,EAAK/B,MAAKvJ,QAAAA,OAAWsO,EAAM,GAGjC,IAGA,IAAAhO,EAMI3C,GAAW,CAAE,EAAA6Q,EAAAlO,EALfmO,SAAAA,OAAW,IAAHD,EAAG,YAAWA,EAAAjN,EAAAjB,EACtBkB,MAAAA,OAAQ,IAAHD,EAAG,IAAGA,EAAAE,EAAAnB,EACXoB,OAAAA,OAAS,IAAHD,EAAG,IAAGA,EAAAE,EAAArB,EACZsB,OAAAA,OAAS,IAAHD,EAAG,CAAEE,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAIL,EAAA+M,EAAApO,EACrDqO,WAAAA,OAAa,IAAHD,EAAG,IAAInK,IAAKmK,EAGxB,IACE,IAEIE,EAASC,EAFPC,EAAc,IACdC,EAAenP,KAAKG,IAAmB,GAAfsO,EAAMxQ,OAAc,GAAI,IAItD,OAAQ4Q,GACN,IAAK,WACHG,EAAUhN,EAAOI,KACjB6M,EAAUjN,EAAOC,IACjB,MACF,IAAK,YAYL,QAEE+M,EAAUhP,KAAKG,IAAI,EAAGyB,EAAQI,EAAOE,MAAQgN,GAC7CD,EAAUjN,EAAOC,UAXnB,IAAK,cACH+M,EAAUhN,EAAOI,KACjB6M,EAAUjP,KAAKG,IAAI,EAAG2B,EAASE,EAAOG,OAASgN,GAC/C,MACF,IAAK,eACHH,EAAUhP,KAAKG,IAAI,EAAGyB,EAAQI,EAAOE,MAAQgN,GAC7CD,EAAUjP,KAAKG,IAAI,EAAG2B,EAASE,EAAOG,OAASgN,GASnD,IAAMC,EAASpK,EACZK,OAAO,KACPJ,KAAK,QAAS,gBACdA,KAAK,YAAW,aAAA7E,OAAe4O,EAAO,MAAA5O,OAAK6O,EAAO,MAGrDG,EACG/J,OAAO,QACPJ,KAAK,QAASiK,GACdjK,KAAK,SAAUkK,GACflK,KAAK,OAAQ,6BACbA,KAAK,SAAU,QACfA,KAAK,eAAgB,GACrBA,KAAK,KAAM,GACXA,KAAK,KAAM,GAGd,IAAMoK,EAAgBD,EACnB1E,UAAU,iBACV5M,KAAK2Q,GACL3B,QACAzH,OAAO,KACPJ,KAAK,QAAS,gBACdA,KAAK,aAAa,SAAC3F,EAAG4N,GAAC,MAAA,iBAAA9M,OAAsB,GAAS,GAAJ8M,EAAM,IAAA,IACxDjI,KAAK,WAAY,GACjBA,KAAK,cAAc,SAAC3F,GAAC,MAAA,UAAAc,OAAed,EAAEqK,OAAS,OAAQ,IACvD/D,GAAG,SAAS,SAAUiF,EAAOvL,GACA,mBAAjB0M,GACTA,EAAanB,EAAOvL,EAEvB,IACAsG,GAAG,YAAY,SAACiF,EAAOvL,GAEL,UAAduL,EAAMpF,KAAiC,MAAdoF,EAAMpF,KACR,mBAAjBuG,GAEPA,EAAanB,EAAOvL,EAExB,IAoBF,OAjBA+P,EACGhK,OAAO,QACPJ,KAAK,QAAS,IACdA,KAAK,SAAU,IACfA,KAAK,KAAM,GACXA,KAAK,KAAM,GACXA,KAAK,QAAQ,SAAC3F,GAAC,OAAKA,EAAEqP,OAAS,MAAM,IACrCW,QAAQ,YAAY,SAAChQ,GAAC,OAAiC,IAA5ByP,EAAW/D,IAAI1L,EAAEqK,UAG/C0F,EACGhK,OAAO,QACPJ,KAAK,IAAK,IACVA,KAAK,IAAK,IACV2F,MAAK,SAACtL,GAAC,OAAKA,EAAEqK,OAAS,SAAS,IAChC1E,KAAK,YAAa,IAEdmK,CACR,CAAC,MAAO9Q,GAEP,OADAD,QAAQC,MAAM,yBAA0BA,GACjCV,EAAGsG,OAAO,KACnB,CACF,CJyQMqL,CACEvL,KAAKgB,IACLhB,KAAKc,kBAAkB2G,YACvB,CACEoD,SAAU7K,KAAKV,eACf1B,MAAOoC,KAAKpC,MACZE,OAAQkC,KAAKlC,OACbE,OAAQgC,KAAKhC,OACb+M,WAAY/K,KAAKe,mBAEnB,SAAC8F,EAAOvL,GAEN,IAAMkQ,GAAmD,IAAvC5D,EAAK7G,iBAAiBiG,IAAI1L,EAAEqK,OAC9CiC,EAAK7G,iBAAiB+E,IAAIxK,EAAEqK,OAAQ6F,GACpC5R,EAAGsG,OAAO2G,EAAMqD,eACbhK,OAAO,QACPoL,QAAQ,WAAYE,GACvB5D,EAAK0C,MACP,KAIJjQ,QAAQ6J,IAAI,+BAlHZ,MAFElE,KAAKiG,aAAa,uBAqHtB,iGAnPAG,EA5EA3B,CA+TC,CAjamB"}